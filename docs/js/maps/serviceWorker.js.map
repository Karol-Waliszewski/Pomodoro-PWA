{"version":3,"sources":["serviceWorker.js"],"names":["cacheName","cacheFiles","self","e","console","log","waitUntil","caches","open","then","cache","addAll","addEventListener","keys","cacheNames","Promise","all","map","thisCacheName","delete","url","respondWith","match","request","response","requestClone","clone","fetch","responseClone","put","err"],"mappings":"YACA,IAAIA,WAAY,wBAGZC,YAAc,IAAK,iBAAkB,gBAAiB,yDAA1DC,MAAID,iBAAa,UAAM,SAAkBE,GAGvCC,QAAQC,IAAI,6BAGZF,EAAEG,UAGFC,OAAOC,KAAKR,WAAWS,KAAK,SAASC,GAEnC,MACAN,SAAQC,IAAI,sCADZK,EAAAC,OAAAV,iBAIHC,KAbDU,iBAAA,WAAA,SAAAT,GAgBEC,QAAQC,IAAI,6BAAZD,EAAAA,UAKAG,OAAOM,OAAOJ,KAAK,SAASK,GAD5B,MAAAC,SAAAC,IAAAF,EAAAG,IAAA,SAAAC,GAKI,GAAIA,IAAkBlB,UAEpB,MACAI,SAAQC,IAAI,sDAAuDa,GADnEX,OAAAY,OAAAD,WASRhB,KAAKU,iBAAiB,QAAS,SAAST,GAAxCD,QAAKU,IAAAA,wBAA0BT,EAASA,QAAGiB,KAGzCjB,EAAAkB,YAGAd,OAAAe,MAAAnB,EAAAoB,SAAAd,KAAA,SAAAe,GAGE,GAAAA,EAGE,MAFFpB,SAAIoB,IAAU,iCAAArB,EAAAoB,QAAAH,IAAAI,GAEZA,CAMF,IAAIC,GAAetB,EAAEoB,QAAQG,OAA7BC,OAAIF,GAAetB,KAAEoB,SAAFC,GAGjB,IAAKA,EACHpB,MADFA,SAAKoB,IAAL,2CACEpB,CAIF,IAAIwB,GAAgBJ,EAASE,OAE7BnB,QAAAC,KAAAR,WAAAS,KAAA,SAAAC,GAOE,MAJAA,GAAAmB,IAAA1B,EAAAoB,QAAAK,GACAlB,QAAMmB,IAAMN,kCAAZpB,EAAAoB,QAAAH,KAGAI,MAMFpB,MAAAA,SAAY0B,GAtBd1B,QAAAC,IAAA,oDAAAyB","file":"../serviceWorker.js","sourcesContent":["// Set a name for the current cache\nvar cacheName = 'Pomodoro-PWA-cache-kw';\n\n// Default files to always cache\nvar cacheFiles = ['/', '/css/style.css', '/js/script.js', 'https://fonts.googleapis.com/css?family=Archivo+Narrow']\n\nself.addEventListener('install', function(e) {\n  console.log('[ServiceWorker] Installed');\n\n  // e.waitUntil Delays the event until the Promise is resolved\n  e.waitUntil(\n\n  // Open the cache\n  caches.open(cacheName).then(function(cache) {\n\n    // Add all the default files to the cache\n    console.log('[ServiceWorker] Caching cacheFiles');\n    return cache.addAll(cacheFiles);\n  })); // end e.waitUntil\n});\n\nself.addEventListener('activate', function(e) {\n  console.log('[ServiceWorker] Activated');\n\n  e.waitUntil(\n\n  // Get all the cache keys (cacheName)\n  caches.keys().then(function(cacheNames) {\n    return Promise.all(cacheNames.map(function(thisCacheName) {\n\n      // If a cached item is saved under a previous cacheName\n      if (thisCacheName !== cacheName) {\n\n        // Delete that cached file\n        console.log('[ServiceWorker] Removing Cached Files from Cache - ', thisCacheName);\n        return caches.delete(thisCacheName);\n      }\n    }));\n  })); // end e.waitUntil\n\n});\n\nself.addEventListener('fetch', function(e) {\n  console.log('[ServiceWorker] Fetch', e.request.url);\n\n  // e.respondWidth Responds to the fetch event\n  e.respondWith(\n\n  // Check in cache for the request being made\n  caches.match(e.request).then(function(response) {\n\n    // If the request is in the cache\n    if (response) {\n      console.log(\"[ServiceWorker] Found in Cache\", e.request.url, response);\n      // Return the cached version\n      return response;\n    }\n\n    // If the request is NOT in the cache, fetch and cache\n\n    var requestClone = e.request.clone();\n    fetch(requestClone).then(function(response) {\n\n      if (!response) {\n        console.log(\"[ServiceWorker] No response from fetch \")\n        return response;\n      }\n\n      var responseClone = response.clone();\n\n      //  Open the cache\n      caches.open(cacheName).then(function(cache) {\n\n        // Put the fetched response in the cache\n        cache.put(e.request, responseClone);\n        console.log('[ServiceWorker] New Data Cached', e.request.url);\n\n        // Return the response\n        return response;\n\n      }); // end caches.open\n\n    }).catch(function(err) {\n      console.log('[ServiceWorker] Error Fetching & Caching New Data', err);\n    });\n\n  }))\n});\n"]}